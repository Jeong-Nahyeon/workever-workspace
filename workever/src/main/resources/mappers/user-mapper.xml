<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="userMapper">

	<resultMap type="User" id="userResult">
		<result column="user_no" property="userNo" />
		<result column="dept_no" property="deptNo" />
		<result column="com_no" property="comNo" />
		<result column="user_email" property="userEmail" />
		<result column="user_name" property="userName" />
		<result column="user_phone" property="userPhone" />
		<result column="user_pwd" property="userPwd" />
		<result column="user_rank" property="userRank" />
		<result column="user_joindate" property="userJoinDate" />
		<result column="user_resdate" property="userResDate" />
		<result column="user_status" property="userStatus" />
		<result column="user_enabled" property="userEnabled" />
		<result column="user_filepath" property="userFilePath" />
		<result column="user_auth" property="userAuth" />
		<result column="user_annual_date" property="userAnnualDate" />
		<result column="user_use_date" property="userUseDate" />
		
		<result column="dept_name" property="deptName" />
		<result column="com_Name" property="comName"/>
		<result column="com_Phone" property="comPhone" />
	</resultMap>
	
	<resultMap type="Company" id="companyResult">
		<result column="com_no" property="comNo"/>
		<result column="com_name" property="comName"/>
		<result column="com_phone" property="comPhone"/>
		<result column="com_class" property="comClass"/>
		<result column="com_encode" property="comEncode"/>
		<result column="com_originname" property="comOriginName"/>
		<result column="com_changename" property="comChangeName"/>
		<result column="com_logopath" property="comLogoPath"/>
	</resultMap>
	
	<resultMap type="Dept" id="deptResult">
		<result column="dept_no" property="deptNo"/>
		<result column="dept_name" property="deptName"/>
		<result column="com_no" property="comNo"/>
	</resultMap>

	<select id="loginUser" resultMap="userResult">
		select
		       user_no
		     , d.dept_no
		     , c.com_no 
		     , user_email
		     , user_name
		     , substr(user_phone, 1, 3) || '-' || substr(user_phone, 4, 4) || '-' || substr(user_phone,8) user_phone
		     , user_pwd
		     , user_rank
		     , user_joindate
		     , user_resdate
		     , user_status
		     , user_enabled
		     , user_filepath
		     , user_auth
		     , user_annual_date
		     , user_use_date
             , dept_name
             , com_name
             , com_phone
		  from users u
          join dept d on (d.dept_no = u.dept_no)
          join company c on (c.com_no = u.com_no)
		 where user_email = #{userEmail}
		   and user_enabled = 'Y'
		   and user_status = '재직'
	</select>
	
	<select id="emailDoubleCheck" resultType="_int">
		select
		       count(*)
		  from users
		 where user_email = #{checkEmail}
	</select>
	
	<!-- 회사코드 중복확인 -->
	<select id="companyCodeCheckAdmin" resultType="_int">
		select
		       count(*)
		  from company
		 where com_encode = #{companyCode}
	</select>

	<!-- [가연] 주소록 (사원 총 인원) -->
	<select id="abSelectListCount" resultType="_int">
		select
			   count(*)
	      from users
	     where user_enabled = 'Y'
	</select>
	
	<!-- [가연] 주소록 (사원 정보) -->
	<select id="abSelectList" resultMap="userResult">
		select
		       user_no
		     , user_name
		     , dept_name
		     , user_email
		     , user_phone
		     , user_filepath
		  from users
		  join dept using (dept_no)
		 order
    		by user_no desc
	</select>
	
	<!-- 회원가입(관리자) -->
	<insert id="insertCompany" parameterType="hashMap">
		insert all
		into company
		    values
		    (
		      SEQ_COMPANY.nextval
		    , #{comName}
		    , #{userPhone}
		    , #{comClass}
		    , #{comEncode}
		    , null
		    , null
		    , null
		    ) 
        into dept
            values
            (
              SEQ_dept.nextval
            , SEQ_COMPANY.currval
            , '임원'
            )
        into users
		    (
		      user_no
            , dept_no
		    , com_no
		    , user_email
		    , user_name
		    , user_phone
		    , user_pwd
		    , user_rank
		    , user_auth
		    )
		    values
		    (
		      SEQ_USERS.nextval
            , SEQ_DEPT.currval
		    , SEQ_COMPANY.currval
		    , #{userEmail}
		    , #{comName}
		    , #{userPhone}
		    , #{userPwd}
		    , '관리자'
		    , 'A'
		    )
		into approval_form
			(
			  apvl_form_no
			, apvl_form_name
			, com_no
			)
			values
			(
			  1
			, '휴가 신청서'
			, SEQ_COMPANY.currval
			)
		into approval_form
			(
			  apvl_form_no
			, apvl_form_name
			, com_no
			)	
			values
			(
			  2
			, '연장 근무 신청서'
			, SEQ_COMPANY.currval
			)
		into approval_form
			(
			  apvl_form_no
			, apvl_form_name
			, com_no
			)	
			values
			(
			  3
			, '업무 보고서'
			, SEQ_COMPANY.currval
			)
		into approval_form
			(
			  apvl_form_no
			, apvl_form_name
			, com_no
			)	
			values
			(
			  4
			, '지출 품의서'
			, SEQ_COMPANY.currval
			)
		into approval_form
			(
			  apvl_form_no
			, apvl_form_name
			, com_no
			)	
			values
			(
			  5
			, '출장 신청서'
			, SEQ_COMPANY.currval
			)
		select *
		  from DUAL
	</insert>
	
	<!-- 회원가입(사원) -->
  	<insert id="insertUser">
  		insert 
		  into users
		      (
		        user_no
		      , com_no
		      , user_email
		      , user_name
		      , user_phone
		      , user_pwd
		      , user_enabled
		      )
		      values
		      (
		        SEQ_users.nextval
		      , (select com_no from company where com_encode = #{comEncode})
		      , #{userEmail}
		      , #{userName}
		      , #{userPhone}
		      , #{userPwd}
		      , 'N'
		      )
  	</insert>
  	
  	<!-- 임시비밀번호 발급용 이메일 확인 -->
  	<select id="pwdEmailCheck" resultType="_int">
  		select
		       count(*)
		  from users
		 where user_email = #{userEmail}
		   and user_phone = #{userPhone}
  	</select>
  	
  	<!-- 임시비밀번호 저장 -->
  	<update id="updateTemPwd">
  		update
  			   users
  		   set user_pwd = #{userPwd}
  		 where user_email = #{userEmail}
  		   and user_phone = #{userPhone}
  	</update>
  	
  	<!-- 현재비밀번호 조회 -->
  	<select id="checkBeforePwdCheck" resultMap="userResult">
  		select
  			   user_pwd
  		  from users
  		 where user_no = #{userNo}
  	</select>
  	
  	<!-- 비밀번호 변경 -->
  	<update id="updatePwd">
  		update users
		   set user_pwd = #{userPwd}
		 where user_no = #{userNo}
  	</update>
  	
  	<!-- 사원 프로필 변경 -->
  	<update id="updateUserProfile">
  		update users
  		   set 
  		   		user_name = #{userName}
  		   	  , user_phone = #{userPhone}
  		   	  , user_filepath = #{userFilePath}
  		 where user_email = #{userEmail}
  	</update>
  	
  	<!-- 부서 목록 조회 -->
  	<select id="selectDept" resultMap="deptResult">
  		select dept_name, d.com_no, d.dept_no
		  from dept d
		 where d.com_no = #{comNo}
  	</select>
  	
  	<!-- 관리자 프로필 변경 -->
  	<update id="updateAdminProfileUser">
  		update users
		   set user_name = #{userName}
		     , user_phone = #{userPhone}
		     , user_rank = #{userRank}
		     , dept_no = #{deptNo}
		     , user_filepath = #{userFilePath}
		 where user_email = #{userEmail}
  	</update>
  	<update id="updateAdminProfileCompany">
  		update company
		   set com_name = #{comName}
		     , com_phone = #{comPhone}
		 where com_no = #{comNo}
  	</update>
  	
  	<!-- 사원승인 -> 미승인 사원 조회 -->
  	<select id="selectDisableUser" resultMap="userResult">
  		select
		       user_email
		     , user_phone
		     , user_name
		     , user_enabled
		  from users
		 where user_enabled = 'N'
		   and user_status = '재직'
		   and com_no = #{cno}
  	</select>
  	
  	<!-- 사원승인 -->
  	<update id="userEnable">
  		update users
  		   set dept_no = #{deptNo}
  		     , user_rank = #{userRank}
  		     , user_enabled = 'Y'
  		 where user_email = #{userEmail}
  	</update>
  	
  	<!-- [가연] 출퇴근관리_관리자 (출근 안 한 사원 조회)  -->
	<select id="adSelectAbsenceUserList" resultMap="userResult">
		select u.user_no
		  from users u
		  left join commute c on (u.user_no = c.user_no and cm_date = to_char(sysdate, 'yyyy-mm-dd'))
		 where c.user_no is null
		   and user_rank != '관리자'
	</select>
	
	<!-- 전체사원 리스트 수 -->
	<select id="selectUserListCount" resultType="_int">
		select 
			   count(*)
		  from users
		 where com_no = #{comNo}
		   and user_auth = 'S'
	</select>
	<!-- 전체 사원 조회 -->
	<select id="selectAllUser" resultMap="userResult">
		<choose>
			<when test="category.equals('전체')">
				select
				       user_email
				     , user_name
		             , user_phone
		             , com_name
				     , dept_name
		             , d.dept_no
				     , user_rank
		             , com_phone
				     , user_status
		             , user_filepath
				  from users u
				  join dept d on (d.dept_no = u.dept_no)
		          join company c on (c.com_no = u.com_no)
				 where u.com_no = #{comNo}
				   and user_auth = 'S'
				 order
				    by (case when user_status = '재직' then 1 else 2 end),
				        user_name asc
			</when>
			<otherwise>
				select
				       user_email
				     , user_name
		             , user_phone
		             , com_name
				     , dept_name
		             , d.dept_no
				     , user_rank
		             , com_phone
				     , user_status
		             , user_filepath
				  from users u
				  join dept d on (d.dept_no = u.dept_no)
		          join company c on (c.com_no = u.com_no)
				 where u.com_no = #{comNo}
				   and user_auth = 'S'
				   and user_status = #{category}
			</otherwise>
		</choose>
	</select>
	
	<update id="adminUpdateUserInfo">
		update users
		   set user_rank = #{userRank}
		 	 , dept_no = #{deptNo}
		 where user_email = #{userEmail}
	</update>
	
	<update id="adminUpdateStatusUser">
		update users
		   set user_status = #{userStatus}
		 where user_email = #{userEmail}
	</update>
	
	<!-- 관리자 사원 검색 -->
	<select id="searchCount" resultType="_int">
		select count(*)
		  from users u
		  join dept d using (dept_no)
		 where u.com_no = #{comNo}
		 <if test="group == 'user-Name'">
		 	and user_name = #{keyword}
		 </if>
		 <if test="group == 'user-Rank'">
		 	and user_rank = #{keyword}
		 </if>
		 <if test="group == 'dept-Name'">
		 	and dept_name = #{keyword}
		 </if>
	</select>
	
	<select id="searchList" resultMap="userResult">
		<choose>
			<when test="category.equals('전체')">
				select
				       user_email
				     , user_name
		             , user_phone
		             , com_name
				     , dept_name
		             , d.dept_no
				     , user_rank
		             , com_phone
				     , user_status
		             , user_filepath
				  from users u
				  join dept d on (d.dept_no = u.dept_no)
		          join company c on (c.com_no = u.com_no)
				 where u.com_no = #{comNo}
				   and user_auth = 'S'
				  	 <if test="group == 'user-Name'">
					 	and user_name = #{keyword}
					 </if>
					 <if test="group == 'user-Rank'">
					 	and user_rank = #{keyword}
					 </if>
					 <if test="group == 'dept-Name'">
					 	and dept_name = #{keyword}
					 </if>
				 order
				    by (case when user_status = '재직' then 1 else 2 end),
				        user_name asc
			</when>
			<otherwise>
				select
				       user_email
				     , user_name
		             , user_phone
		             , com_name
				     , dept_name
		             , d.dept_no
				     , user_rank
		             , com_phone
				     , user_status
		             , user_filepath
				  from users u
				  join dept d on (d.dept_no = u.dept_no)
		          join company c on (c.com_no = u.com_no)
				 where u.com_no = #{comNo}
				   and user_auth = 'S'
				   and user_status = #{category}
				   	 <if test="group == 'user-Name'">
					 	and user_name = #{keyword}
					 </if>
					 <if test="group == 'user-Rank'">
					 	and user_rank = #{keyword}
					 </if>
					 <if test="group == 'dept-Name'">
					 	and dept_name = #{keyword}
					 </if>
			</otherwise>
		</choose>
	</select>
</mapper>
